package main

import (
  "encoding/json"
  "fmt"
  "math/rand"
  "time"

  "github.com/apcera/nats"
)

type individuo struct {
  ID      int
  RID     int
  Geracao int
  Score   float64
}

type rule struct {
  ID      int
  Geracao int
}

func main() {
  conn, _ := nats.Connect(nats.DefaultURL)
  // enc, _ := nats.NewEncodedConn(conn, "json")
  // defer enc.Close()
  defer conn.Close()

  sub, _ := conn.SubscribeSync("rule")
  var r rule
  i := 0
  rand.Seed(time.Now().UTC().UnixNano())
  for {
    m, err := sub.NextMsg(1 * time.Second)
    if err == nil {
      // p = &Person{m.Data}
      // fmt.Printf("Weight: %f, Age: %d\n", p.Weight, p.Age)
      json.Unmarshal(m.Data, &r)
      fmt.Printf("Rule ID: %d, Geracacao: %d\n", r.ID, r.Geracao)
      ind := &individuo{ID: i, RID: r.ID, Geracao: r.Geracao, Score: rand.Float64()}
      b, _ := json.Marshal(ind)
      conn.Publish("fitness", b)
      i++
    } else {
      ind := &individuo{ID: i, RID: r.ID, Geracao: r.Geracao, Score: rand.Float64()}
      b, _ := json.Marshal(ind)
      conn.Publish("fitness", b)
      i++
    }
  }
}
